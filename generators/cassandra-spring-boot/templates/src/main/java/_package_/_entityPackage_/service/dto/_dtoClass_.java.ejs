<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%- entityAbsolutePackage %>.service.dto;

import java.util.Objects;
<%_ if (entityApiDescription || importApiModelProperty) { _%>
import io.swagger.v3.oas.annotations.media.Schema;
<%_ } _%>
<%_ if (anyFieldIsInstant) { _%>
import java.time.Instant;
<%_ } _%>
<%_ if (anyFieldIsLocalDate) { _%>
import java.time.LocalDate;
<%_ } _%>
<%_ if (anyFieldIsZonedDateTime) { _%>
import java.time.ZonedDateTime;
<%_ } _%>
<%_ if (anyFieldIsDuration) { _%>
import java.time.Duration;
<%_ } _%>
<%_ if (anyPropertyHasValidation) { _%>
import jakarta.validation.constraints.*;
<%_ } _%>
import java.io.Serializable;
<%_ if (anyFieldIsBigDecimal) { _%>
import java.math.BigDecimal;
<%_ } _%>
<%_ if (anyFieldIsBlobDerived && databaseTypeCassandra) { _%>
import java.nio.ByteBuffer;
<%_ } _%>
<%_ if (restProperties.some(property => property.collection)) { _%>
import java.util.HashSet;
import java.util.Set;
<%_ } _%>
<%_ if (anyFieldIsUUID) { _%>
import java.util.UUID;
<%_ } _%>
<%_ if (anyFieldIsBlobDerived && databaseTypeSql) { _%>
import jakarta.persistence.Lob;
<%_ } _%>
<%_ Object.keys(uniqueEnums).forEach(function(element) { _%>
import <%- entityAbsolutePackage %>.domain.enumeration.<%- element %>;
<%_ }); _%>


/**
 * A DTO for the {@link <%- entityAbsolutePackage %>.domain.<%- persistClass %>} entity.
 */
<%_ if (entityApiDescription) { _%>
@Schema(description = "<%- entityApiDescription %>")
<%_ } _%>
@SuppressWarnings("common-java:DuplicatedBlocks")
public class <%- dtoClass %> implements Serializable {

<%_ if (!embedded && primaryKeySaathratri.composite) { _%>
    private <%= dtoClass %>Id <%= primaryKeySaathratri.name %>;
<%_ } else { _%>
    private <%= primaryKey.type %> <%= primaryKey.name %>;
<%_ } _%>
<%_ for (property of restProperties) { _%>
  <%_ if (!isCompositePrimaryKeyServerProperty(primaryKeySaathratri, property) && property.propertyName !== 'id') { _%>
    private <%- property.propertyDtoJavaType %> <%- property.propertyName %>;
  <%_ } _%>
<%_ } _%>
<%_ for(const field of fields) { _%>
    <%_ if(field.fieldTypeBlobContent === 'image') { _%>
            private String <%= field.fieldName %>ContentType;
    <%_ } _%>
  <%_ } _%>
public <%- dtoClass %> () {
    // Empty constructor needed for Jackson.
}
<%_ if (primaryKeySaathratri.composite) { _%>
    public <%= dtoClass %>Id get<%= primaryKeySaathratri.nameCapitalized %>() {
        return this.<%= primaryKeySaathratri.name %>;
    }

    public void set<%= primaryKeySaathratri.nameCapitalized %>(<%= dtoClass %>Id <%= primaryKeySaathratri.name %>) {
        this.<%= primaryKeySaathratri.name %> = <%= primaryKeySaathratri.name %>;
    }
    <%_ if (fluentMethods) { _%>
        public <%= dtoClass %> <%= primaryKeySaathratri.name %>(<%= dtoClass %>Id <%= primaryKeySaathratri.name %>) {
            this.<%= primaryKeySaathratri.name %> = <%= primaryKeySaathratri.name %>;
            return this;
        }
  <%_ } _%>
<%_ } else { _%>

    public <%= primaryKey.type %> get<%= primaryKey.nameCapitalized %>() {
        return this.<%= primaryKey.name %>;
    }
    public void set<%= primaryKey.nameCapitalized %>(<%= primaryKey.type %> <%= primaryKey.name %>) {
        this.<%= primaryKey.name %> = <%= primaryKey.name %>;
    }
    <%_ if (fluentMethods) { _%>
        public <%= dtoClass %> <%= primaryKey.name %>(<%= primaryKey.type %> <%= primaryKey.name %>) {
            this.<%= primaryKey.name %> = <%= primaryKey.name %>;
            return this;
        }
  <%_ } _%>
  <%_ } _%>

<%_ for(const field of fields) { _%>
    <%_ if(field.fieldTypeBlobContent === 'image') { _%>
            public String get<%= field.fieldInJavaBeanMethod %>ContentType() {
                return this.<%= field.fieldName %>ContentType;
            }
            public void set<%= field.fieldInJavaBeanMethod %>ContentType(String <%= field.fieldName %>ContentType) {
                this.<%= field.fieldName %>ContentType = <%= field.fieldName %>ContentType;
}
            <%_ if (fluentMethods) { _%>
                public <%= dtoClass %> <%= field.fieldName %>ContentType(String <%= field.fieldName %>ContentType) {
                    this.<%= field.fieldName %>ContentType = <%= field.fieldName %>ContentType;
                    return this;
                }
              <%_ } _%>
    <%_ } _%>
<%_ } _%>

<%_ for (property of restProperties) { _%>
  <%_ if (!isCompositePrimaryKeyServerProperty(primaryKeySaathratri, property) && property.propertyName !== 'id') { _%>
    public <%- property.propertyDtoJavaType %> get<%- property.propertyJavaBeanName %>() {
        return <%- property.propertyName %>;
    }

    public void set<%- property.propertyJavaBeanName %>(<%- property.propertyDtoJavaType %> <%- property.propertyName %>) %> {
        this.<%- property.propertyName %> = <%- property.propertyName %>;
    }
      <%_ if (fluentMethods) { _%>


        public <%= dtoClass %> <%= property.propertyName %>(<%= property.propertyDtoJavaType %> <%= property.propertyName %>) {
            this.<%= property.propertyName %> = <%= property.propertyName %>;
            return this;
    }
  <%_ } _%>
    <%_ } _%>
<%_ } _%>

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof <%- dtoClass %>)) return false;

        <%- dtoClass %> that = (<%- dtoClass %>) o;
        <%_ if (primaryKeySaathratri.composite) { _%>
        return Objects.equals(get<%= primaryKeySaathratri.nameCapitalized %>(), that.get<%= primaryKeySaathratri.nameCapitalized %>());
<%_ } else { _%>
        return Objects.equals(get<%= primaryKey.nameCapitalized %>(), that.get<%= primaryKey.nameCapitalized %>());
<%_ } _%>
    }

    @Override
    public int hashCode() {
        return Objects.hash(<%= primaryKeySaathratri.name %>);
    }

    // prettier-ignore
    @Override
    public String toString() {
        return "<%= entityClass %>DTO {" + <%_ if (primaryKeySaathratri.composite) { _%> "<%= primaryKeySaathratri.name %> = " + get<%= primaryKeySaathratri.nameCapitalized %> <%_ } else { _%> "<%= primaryKey.name %> = " + get<%= primaryKey.nameCapitalized %><%_ } _%>() +
<%_ for ([idx, reference] of dtoReferences.entries()) {
  const isQuoted = reference.field && !reference.field.fieldTypeNumeric;_%>
  <%_ if (!isCompositePrimaryKeyServerReference(primaryKeySaathratri, reference)) { _%>
            "<%= idx === 0 ? '' : ', ' %><%= reference.name %>=<% if (isQuoted) { %>'<% } %>" + <%= buildJavaGet(reference) %> <% if (isQuoted) { %>+ "'" <% } %>+
            <%_ if(reference.type === 'ByteBuffer') { _%>
            ", <%= reference.name %>ContentType='" + get<%= this._.upperFirst(reference.name) %>ContentType() + "'" +
<%_ } _%>
<%_
      }
    }
_%>
            "}";
    }
}
